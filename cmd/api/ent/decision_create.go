// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/crowdsecurity/crowdsec/cmd/api/ent/decision"
	"github.com/crowdsecurity/crowdsec/cmd/api/ent/signal"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// DecisionCreate is the builder for creating a Decision entity.
type DecisionCreate struct {
	config
	mutation *DecisionMutation
	hooks    []Hook
}

// SetCreatedAt sets the created_at field.
func (dc *DecisionCreate) SetCreatedAt(t time.Time) *DecisionCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (dc *DecisionCreate) SetNillableCreatedAt(t *time.Time) *DecisionCreate {
	if t != nil {
		dc.SetCreatedAt(*t)
	}
	return dc
}

// SetUpdatedAt sets the updated_at field.
func (dc *DecisionCreate) SetUpdatedAt(t time.Time) *DecisionCreate {
	dc.mutation.SetUpdatedAt(t)
	return dc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (dc *DecisionCreate) SetNillableUpdatedAt(t *time.Time) *DecisionCreate {
	if t != nil {
		dc.SetUpdatedAt(*t)
	}
	return dc
}

// SetUntil sets the until field.
func (dc *DecisionCreate) SetUntil(t time.Time) *DecisionCreate {
	dc.mutation.SetUntil(t)
	return dc
}

// SetReason sets the reason field.
func (dc *DecisionCreate) SetReason(s string) *DecisionCreate {
	dc.mutation.SetReason(s)
	return dc
}

// SetScenario sets the scenario field.
func (dc *DecisionCreate) SetScenario(s string) *DecisionCreate {
	dc.mutation.SetScenario(s)
	return dc
}

// SetDecisionType sets the decisionType field.
func (dc *DecisionCreate) SetDecisionType(s string) *DecisionCreate {
	dc.mutation.SetDecisionType(s)
	return dc
}

// SetSourceIpStart sets the sourceIpStart field.
func (dc *DecisionCreate) SetSourceIpStart(i int) *DecisionCreate {
	dc.mutation.SetSourceIpStart(i)
	return dc
}

// SetSourceIpEnd sets the sourceIpEnd field.
func (dc *DecisionCreate) SetSourceIpEnd(i int) *DecisionCreate {
	dc.mutation.SetSourceIpEnd(i)
	return dc
}

// SetSourceStr sets the sourceStr field.
func (dc *DecisionCreate) SetSourceStr(s string) *DecisionCreate {
	dc.mutation.SetSourceStr(s)
	return dc
}

// SetScope sets the scope field.
func (dc *DecisionCreate) SetScope(s string) *DecisionCreate {
	dc.mutation.SetScope(s)
	return dc
}

// SetOwnerID sets the owner edge to Signal by id.
func (dc *DecisionCreate) SetOwnerID(id int) *DecisionCreate {
	dc.mutation.SetOwnerID(id)
	return dc
}

// SetNillableOwnerID sets the owner edge to Signal by id if the given value is not nil.
func (dc *DecisionCreate) SetNillableOwnerID(id *int) *DecisionCreate {
	if id != nil {
		dc = dc.SetOwnerID(*id)
	}
	return dc
}

// SetOwner sets the owner edge to Signal.
func (dc *DecisionCreate) SetOwner(s *Signal) *DecisionCreate {
	return dc.SetOwnerID(s.ID)
}

// Mutation returns the DecisionMutation object of the builder.
func (dc *DecisionCreate) Mutation() *DecisionMutation {
	return dc.mutation
}

// Save creates the Decision in the database.
func (dc *DecisionCreate) Save(ctx context.Context) (*Decision, error) {
	if err := dc.preSave(); err != nil {
		return nil, err
	}
	var (
		err  error
		node *Decision
	)
	if len(dc.hooks) == 0 {
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DecisionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dc.mutation = mutation
			node, err = dc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DecisionCreate) SaveX(ctx context.Context) *Decision {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (dc *DecisionCreate) preSave() error {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		v := decision.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		v := decision.DefaultUpdatedAt()
		dc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dc.mutation.Until(); !ok {
		return &ValidationError{Name: "until", err: errors.New("ent: missing required field \"until\"")}
	}
	if _, ok := dc.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New("ent: missing required field \"reason\"")}
	}
	if _, ok := dc.mutation.Scenario(); !ok {
		return &ValidationError{Name: "scenario", err: errors.New("ent: missing required field \"scenario\"")}
	}
	if _, ok := dc.mutation.DecisionType(); !ok {
		return &ValidationError{Name: "decisionType", err: errors.New("ent: missing required field \"decisionType\"")}
	}
	if _, ok := dc.mutation.SourceIpStart(); !ok {
		return &ValidationError{Name: "sourceIpStart", err: errors.New("ent: missing required field \"sourceIpStart\"")}
	}
	if _, ok := dc.mutation.SourceIpEnd(); !ok {
		return &ValidationError{Name: "sourceIpEnd", err: errors.New("ent: missing required field \"sourceIpEnd\"")}
	}
	if _, ok := dc.mutation.SourceStr(); !ok {
		return &ValidationError{Name: "sourceStr", err: errors.New("ent: missing required field \"sourceStr\"")}
	}
	if _, ok := dc.mutation.Scope(); !ok {
		return &ValidationError{Name: "scope", err: errors.New("ent: missing required field \"scope\"")}
	}
	return nil
}

func (dc *DecisionCreate) sqlSave(ctx context.Context) (*Decision, error) {
	d, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	d.ID = int(id)
	return d, nil
}

func (dc *DecisionCreate) createSpec() (*Decision, *sqlgraph.CreateSpec) {
	var (
		d     = &Decision{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: decision.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: decision.FieldID,
			},
		}
	)
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: decision.FieldCreatedAt,
		})
		d.CreatedAt = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: decision.FieldUpdatedAt,
		})
		d.UpdatedAt = value
	}
	if value, ok := dc.mutation.Until(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: decision.FieldUntil,
		})
		d.Until = value
	}
	if value, ok := dc.mutation.Reason(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: decision.FieldReason,
		})
		d.Reason = value
	}
	if value, ok := dc.mutation.Scenario(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: decision.FieldScenario,
		})
		d.Scenario = value
	}
	if value, ok := dc.mutation.DecisionType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: decision.FieldDecisionType,
		})
		d.DecisionType = value
	}
	if value, ok := dc.mutation.SourceIpStart(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: decision.FieldSourceIpStart,
		})
		d.SourceIpStart = value
	}
	if value, ok := dc.mutation.SourceIpEnd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: decision.FieldSourceIpEnd,
		})
		d.SourceIpEnd = value
	}
	if value, ok := dc.mutation.SourceStr(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: decision.FieldSourceStr,
		})
		d.SourceStr = value
	}
	if value, ok := dc.mutation.Scope(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: decision.FieldScope,
		})
		d.Scope = value
	}
	if nodes := dc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   decision.OwnerTable,
			Columns: []string{decision.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: signal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return d, _spec
}

// DecisionCreateBulk is the builder for creating a bulk of Decision entities.
type DecisionCreateBulk struct {
	config
	builders []*DecisionCreate
}

// Save creates the Decision entities in the database.
func (dcb *DecisionCreateBulk) Save(ctx context.Context) ([]*Decision, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Decision, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				if err := builder.preSave(); err != nil {
					return nil, err
				}
				mutation, ok := m.(*DecisionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (dcb *DecisionCreateBulk) SaveX(ctx context.Context) []*Decision {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
