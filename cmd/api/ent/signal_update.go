// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/crowdsecurity/crowdsec/cmd/api/ent/decision"
	"github.com/crowdsecurity/crowdsec/cmd/api/ent/event"
	"github.com/crowdsecurity/crowdsec/cmd/api/ent/machine"
	"github.com/crowdsecurity/crowdsec/cmd/api/ent/meta"
	"github.com/crowdsecurity/crowdsec/cmd/api/ent/predicate"
	"github.com/crowdsecurity/crowdsec/cmd/api/ent/signal"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// SignalUpdate is the builder for updating Signal entities.
type SignalUpdate struct {
	config
	hooks      []Hook
	mutation   *SignalMutation
	predicates []predicate.Signal
}

// Where adds a new predicate for the builder.
func (su *SignalUpdate) Where(ps ...predicate.Signal) *SignalUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// SetCreatedAt sets the created_at field.
func (su *SignalUpdate) SetCreatedAt(t time.Time) *SignalUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (su *SignalUpdate) SetNillableCreatedAt(t *time.Time) *SignalUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetUpdatedAt sets the updated_at field.
func (su *SignalUpdate) SetUpdatedAt(t time.Time) *SignalUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (su *SignalUpdate) SetNillableUpdatedAt(t *time.Time) *SignalUpdate {
	if t != nil {
		su.SetUpdatedAt(*t)
	}
	return su
}

// SetScenario sets the scenario field.
func (su *SignalUpdate) SetScenario(s string) *SignalUpdate {
	su.mutation.SetScenario(s)
	return su
}

// SetBucketId sets the bucketId field.
func (su *SignalUpdate) SetBucketId(s string) *SignalUpdate {
	su.mutation.SetBucketId(s)
	return su
}

// SetAlertMessage sets the alertMessage field.
func (su *SignalUpdate) SetAlertMessage(s string) *SignalUpdate {
	su.mutation.SetAlertMessage(s)
	return su
}

// SetEventsCount sets the eventsCount field.
func (su *SignalUpdate) SetEventsCount(i int) *SignalUpdate {
	su.mutation.ResetEventsCount()
	su.mutation.SetEventsCount(i)
	return su
}

// AddEventsCount adds i to eventsCount.
func (su *SignalUpdate) AddEventsCount(i int) *SignalUpdate {
	su.mutation.AddEventsCount(i)
	return su
}

// SetStartedAt sets the startedAt field.
func (su *SignalUpdate) SetStartedAt(t time.Time) *SignalUpdate {
	su.mutation.SetStartedAt(t)
	return su
}

// SetStoppedAt sets the stoppedAt field.
func (su *SignalUpdate) SetStoppedAt(t time.Time) *SignalUpdate {
	su.mutation.SetStoppedAt(t)
	return su
}

// SetSourceIp sets the sourceIp field.
func (su *SignalUpdate) SetSourceIp(s string) *SignalUpdate {
	su.mutation.SetSourceIp(s)
	return su
}

// SetNillableSourceIp sets the sourceIp field if the given value is not nil.
func (su *SignalUpdate) SetNillableSourceIp(s *string) *SignalUpdate {
	if s != nil {
		su.SetSourceIp(*s)
	}
	return su
}

// ClearSourceIp clears the value of sourceIp.
func (su *SignalUpdate) ClearSourceIp() *SignalUpdate {
	su.mutation.ClearSourceIp()
	return su
}

// SetSourceRange sets the sourceRange field.
func (su *SignalUpdate) SetSourceRange(s string) *SignalUpdate {
	su.mutation.SetSourceRange(s)
	return su
}

// SetNillableSourceRange sets the sourceRange field if the given value is not nil.
func (su *SignalUpdate) SetNillableSourceRange(s *string) *SignalUpdate {
	if s != nil {
		su.SetSourceRange(*s)
	}
	return su
}

// ClearSourceRange clears the value of sourceRange.
func (su *SignalUpdate) ClearSourceRange() *SignalUpdate {
	su.mutation.ClearSourceRange()
	return su
}

// SetSourceAsNumber sets the sourceAsNumber field.
func (su *SignalUpdate) SetSourceAsNumber(s string) *SignalUpdate {
	su.mutation.SetSourceAsNumber(s)
	return su
}

// SetNillableSourceAsNumber sets the sourceAsNumber field if the given value is not nil.
func (su *SignalUpdate) SetNillableSourceAsNumber(s *string) *SignalUpdate {
	if s != nil {
		su.SetSourceAsNumber(*s)
	}
	return su
}

// ClearSourceAsNumber clears the value of sourceAsNumber.
func (su *SignalUpdate) ClearSourceAsNumber() *SignalUpdate {
	su.mutation.ClearSourceAsNumber()
	return su
}

// SetSourceAsName sets the sourceAsName field.
func (su *SignalUpdate) SetSourceAsName(s string) *SignalUpdate {
	su.mutation.SetSourceAsName(s)
	return su
}

// SetNillableSourceAsName sets the sourceAsName field if the given value is not nil.
func (su *SignalUpdate) SetNillableSourceAsName(s *string) *SignalUpdate {
	if s != nil {
		su.SetSourceAsName(*s)
	}
	return su
}

// ClearSourceAsName clears the value of sourceAsName.
func (su *SignalUpdate) ClearSourceAsName() *SignalUpdate {
	su.mutation.ClearSourceAsName()
	return su
}

// SetSourceCountry sets the sourceCountry field.
func (su *SignalUpdate) SetSourceCountry(s string) *SignalUpdate {
	su.mutation.SetSourceCountry(s)
	return su
}

// SetNillableSourceCountry sets the sourceCountry field if the given value is not nil.
func (su *SignalUpdate) SetNillableSourceCountry(s *string) *SignalUpdate {
	if s != nil {
		su.SetSourceCountry(*s)
	}
	return su
}

// ClearSourceCountry clears the value of sourceCountry.
func (su *SignalUpdate) ClearSourceCountry() *SignalUpdate {
	su.mutation.ClearSourceCountry()
	return su
}

// SetSourceLatitude sets the sourceLatitude field.
func (su *SignalUpdate) SetSourceLatitude(f float32) *SignalUpdate {
	su.mutation.ResetSourceLatitude()
	su.mutation.SetSourceLatitude(f)
	return su
}

// SetNillableSourceLatitude sets the sourceLatitude field if the given value is not nil.
func (su *SignalUpdate) SetNillableSourceLatitude(f *float32) *SignalUpdate {
	if f != nil {
		su.SetSourceLatitude(*f)
	}
	return su
}

// AddSourceLatitude adds f to sourceLatitude.
func (su *SignalUpdate) AddSourceLatitude(f float32) *SignalUpdate {
	su.mutation.AddSourceLatitude(f)
	return su
}

// ClearSourceLatitude clears the value of sourceLatitude.
func (su *SignalUpdate) ClearSourceLatitude() *SignalUpdate {
	su.mutation.ClearSourceLatitude()
	return su
}

// SetSourceLongitude sets the sourceLongitude field.
func (su *SignalUpdate) SetSourceLongitude(f float32) *SignalUpdate {
	su.mutation.ResetSourceLongitude()
	su.mutation.SetSourceLongitude(f)
	return su
}

// SetNillableSourceLongitude sets the sourceLongitude field if the given value is not nil.
func (su *SignalUpdate) SetNillableSourceLongitude(f *float32) *SignalUpdate {
	if f != nil {
		su.SetSourceLongitude(*f)
	}
	return su
}

// AddSourceLongitude adds f to sourceLongitude.
func (su *SignalUpdate) AddSourceLongitude(f float32) *SignalUpdate {
	su.mutation.AddSourceLongitude(f)
	return su
}

// ClearSourceLongitude clears the value of sourceLongitude.
func (su *SignalUpdate) ClearSourceLongitude() *SignalUpdate {
	su.mutation.ClearSourceLongitude()
	return su
}

// SetCapacity sets the Capacity field.
func (su *SignalUpdate) SetCapacity(i int) *SignalUpdate {
	su.mutation.ResetCapacity()
	su.mutation.SetCapacity(i)
	return su
}

// AddCapacity adds i to Capacity.
func (su *SignalUpdate) AddCapacity(i int) *SignalUpdate {
	su.mutation.AddCapacity(i)
	return su
}

// SetLeakSpeed sets the leakSpeed field.
func (su *SignalUpdate) SetLeakSpeed(i int) *SignalUpdate {
	su.mutation.ResetLeakSpeed()
	su.mutation.SetLeakSpeed(i)
	return su
}

// AddLeakSpeed adds i to leakSpeed.
func (su *SignalUpdate) AddLeakSpeed(i int) *SignalUpdate {
	su.mutation.AddLeakSpeed(i)
	return su
}

// SetReprocess sets the reprocess field.
func (su *SignalUpdate) SetReprocess(b bool) *SignalUpdate {
	su.mutation.SetReprocess(b)
	return su
}

// SetOwnerID sets the owner edge to Machine by id.
func (su *SignalUpdate) SetOwnerID(id int) *SignalUpdate {
	su.mutation.SetOwnerID(id)
	return su
}

// SetNillableOwnerID sets the owner edge to Machine by id if the given value is not nil.
func (su *SignalUpdate) SetNillableOwnerID(id *int) *SignalUpdate {
	if id != nil {
		su = su.SetOwnerID(*id)
	}
	return su
}

// SetOwner sets the owner edge to Machine.
func (su *SignalUpdate) SetOwner(m *Machine) *SignalUpdate {
	return su.SetOwnerID(m.ID)
}

// AddDecisionIDs adds the decisions edge to Decision by ids.
func (su *SignalUpdate) AddDecisionIDs(ids ...int) *SignalUpdate {
	su.mutation.AddDecisionIDs(ids...)
	return su
}

// AddDecisions adds the decisions edges to Decision.
func (su *SignalUpdate) AddDecisions(d ...*Decision) *SignalUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return su.AddDecisionIDs(ids...)
}

// AddEventIDs adds the events edge to Event by ids.
func (su *SignalUpdate) AddEventIDs(ids ...int) *SignalUpdate {
	su.mutation.AddEventIDs(ids...)
	return su
}

// AddEvents adds the events edges to Event.
func (su *SignalUpdate) AddEvents(e ...*Event) *SignalUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return su.AddEventIDs(ids...)
}

// AddMetaIDs adds the metas edge to Meta by ids.
func (su *SignalUpdate) AddMetaIDs(ids ...int) *SignalUpdate {
	su.mutation.AddMetaIDs(ids...)
	return su
}

// AddMetas adds the metas edges to Meta.
func (su *SignalUpdate) AddMetas(m ...*Meta) *SignalUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return su.AddMetaIDs(ids...)
}

// Mutation returns the SignalMutation object of the builder.
func (su *SignalUpdate) Mutation() *SignalMutation {
	return su.mutation
}

// ClearOwner clears the owner edge to Machine.
func (su *SignalUpdate) ClearOwner() *SignalUpdate {
	su.mutation.ClearOwner()
	return su
}

// RemoveDecisionIDs removes the decisions edge to Decision by ids.
func (su *SignalUpdate) RemoveDecisionIDs(ids ...int) *SignalUpdate {
	su.mutation.RemoveDecisionIDs(ids...)
	return su
}

// RemoveDecisions removes decisions edges to Decision.
func (su *SignalUpdate) RemoveDecisions(d ...*Decision) *SignalUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return su.RemoveDecisionIDs(ids...)
}

// RemoveEventIDs removes the events edge to Event by ids.
func (su *SignalUpdate) RemoveEventIDs(ids ...int) *SignalUpdate {
	su.mutation.RemoveEventIDs(ids...)
	return su
}

// RemoveEvents removes events edges to Event.
func (su *SignalUpdate) RemoveEvents(e ...*Event) *SignalUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return su.RemoveEventIDs(ids...)
}

// RemoveMetaIDs removes the metas edge to Meta by ids.
func (su *SignalUpdate) RemoveMetaIDs(ids ...int) *SignalUpdate {
	su.mutation.RemoveMetaIDs(ids...)
	return su
}

// RemoveMetas removes metas edges to Meta.
func (su *SignalUpdate) RemoveMetas(m ...*Meta) *SignalUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return su.RemoveMetaIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *SignalUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SignalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SignalUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SignalUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SignalUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SignalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   signal.Table,
			Columns: signal.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: signal.FieldID,
			},
		},
	}
	if ps := su.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: signal.FieldCreatedAt,
		})
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: signal.FieldUpdatedAt,
		})
	}
	if value, ok := su.mutation.Scenario(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: signal.FieldScenario,
		})
	}
	if value, ok := su.mutation.BucketId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: signal.FieldBucketId,
		})
	}
	if value, ok := su.mutation.AlertMessage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: signal.FieldAlertMessage,
		})
	}
	if value, ok := su.mutation.EventsCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: signal.FieldEventsCount,
		})
	}
	if value, ok := su.mutation.AddedEventsCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: signal.FieldEventsCount,
		})
	}
	if value, ok := su.mutation.StartedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: signal.FieldStartedAt,
		})
	}
	if value, ok := su.mutation.StoppedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: signal.FieldStoppedAt,
		})
	}
	if value, ok := su.mutation.SourceIp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: signal.FieldSourceIp,
		})
	}
	if su.mutation.SourceIpCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: signal.FieldSourceIp,
		})
	}
	if value, ok := su.mutation.SourceRange(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: signal.FieldSourceRange,
		})
	}
	if su.mutation.SourceRangeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: signal.FieldSourceRange,
		})
	}
	if value, ok := su.mutation.SourceAsNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: signal.FieldSourceAsNumber,
		})
	}
	if su.mutation.SourceAsNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: signal.FieldSourceAsNumber,
		})
	}
	if value, ok := su.mutation.SourceAsName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: signal.FieldSourceAsName,
		})
	}
	if su.mutation.SourceAsNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: signal.FieldSourceAsName,
		})
	}
	if value, ok := su.mutation.SourceCountry(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: signal.FieldSourceCountry,
		})
	}
	if su.mutation.SourceCountryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: signal.FieldSourceCountry,
		})
	}
	if value, ok := su.mutation.SourceLatitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: signal.FieldSourceLatitude,
		})
	}
	if value, ok := su.mutation.AddedSourceLatitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: signal.FieldSourceLatitude,
		})
	}
	if su.mutation.SourceLatitudeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Column: signal.FieldSourceLatitude,
		})
	}
	if value, ok := su.mutation.SourceLongitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: signal.FieldSourceLongitude,
		})
	}
	if value, ok := su.mutation.AddedSourceLongitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: signal.FieldSourceLongitude,
		})
	}
	if su.mutation.SourceLongitudeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Column: signal.FieldSourceLongitude,
		})
	}
	if value, ok := su.mutation.Capacity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: signal.FieldCapacity,
		})
	}
	if value, ok := su.mutation.AddedCapacity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: signal.FieldCapacity,
		})
	}
	if value, ok := su.mutation.LeakSpeed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: signal.FieldLeakSpeed,
		})
	}
	if value, ok := su.mutation.AddedLeakSpeed(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: signal.FieldLeakSpeed,
		})
	}
	if value, ok := su.mutation.Reprocess(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: signal.FieldReprocess,
		})
	}
	if su.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   signal.OwnerTable,
			Columns: []string{signal.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: machine.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   signal.OwnerTable,
			Columns: []string{signal.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: machine.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := su.mutation.RemovedDecisionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   signal.DecisionsTable,
			Columns: []string{signal.DecisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: decision.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.DecisionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   signal.DecisionsTable,
			Columns: []string{signal.DecisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: decision.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := su.mutation.RemovedEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   signal.EventsTable,
			Columns: []string{signal.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   signal.EventsTable,
			Columns: []string{signal.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := su.mutation.RemovedMetasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   signal.MetasTable,
			Columns: []string{signal.MetasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: meta.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.MetasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   signal.MetasTable,
			Columns: []string{signal.MetasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: meta.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{signal.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SignalUpdateOne is the builder for updating a single Signal entity.
type SignalUpdateOne struct {
	config
	hooks    []Hook
	mutation *SignalMutation
}

// SetCreatedAt sets the created_at field.
func (suo *SignalUpdateOne) SetCreatedAt(t time.Time) *SignalUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (suo *SignalUpdateOne) SetNillableCreatedAt(t *time.Time) *SignalUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetUpdatedAt sets the updated_at field.
func (suo *SignalUpdateOne) SetUpdatedAt(t time.Time) *SignalUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (suo *SignalUpdateOne) SetNillableUpdatedAt(t *time.Time) *SignalUpdateOne {
	if t != nil {
		suo.SetUpdatedAt(*t)
	}
	return suo
}

// SetScenario sets the scenario field.
func (suo *SignalUpdateOne) SetScenario(s string) *SignalUpdateOne {
	suo.mutation.SetScenario(s)
	return suo
}

// SetBucketId sets the bucketId field.
func (suo *SignalUpdateOne) SetBucketId(s string) *SignalUpdateOne {
	suo.mutation.SetBucketId(s)
	return suo
}

// SetAlertMessage sets the alertMessage field.
func (suo *SignalUpdateOne) SetAlertMessage(s string) *SignalUpdateOne {
	suo.mutation.SetAlertMessage(s)
	return suo
}

// SetEventsCount sets the eventsCount field.
func (suo *SignalUpdateOne) SetEventsCount(i int) *SignalUpdateOne {
	suo.mutation.ResetEventsCount()
	suo.mutation.SetEventsCount(i)
	return suo
}

// AddEventsCount adds i to eventsCount.
func (suo *SignalUpdateOne) AddEventsCount(i int) *SignalUpdateOne {
	suo.mutation.AddEventsCount(i)
	return suo
}

// SetStartedAt sets the startedAt field.
func (suo *SignalUpdateOne) SetStartedAt(t time.Time) *SignalUpdateOne {
	suo.mutation.SetStartedAt(t)
	return suo
}

// SetStoppedAt sets the stoppedAt field.
func (suo *SignalUpdateOne) SetStoppedAt(t time.Time) *SignalUpdateOne {
	suo.mutation.SetStoppedAt(t)
	return suo
}

// SetSourceIp sets the sourceIp field.
func (suo *SignalUpdateOne) SetSourceIp(s string) *SignalUpdateOne {
	suo.mutation.SetSourceIp(s)
	return suo
}

// SetNillableSourceIp sets the sourceIp field if the given value is not nil.
func (suo *SignalUpdateOne) SetNillableSourceIp(s *string) *SignalUpdateOne {
	if s != nil {
		suo.SetSourceIp(*s)
	}
	return suo
}

// ClearSourceIp clears the value of sourceIp.
func (suo *SignalUpdateOne) ClearSourceIp() *SignalUpdateOne {
	suo.mutation.ClearSourceIp()
	return suo
}

// SetSourceRange sets the sourceRange field.
func (suo *SignalUpdateOne) SetSourceRange(s string) *SignalUpdateOne {
	suo.mutation.SetSourceRange(s)
	return suo
}

// SetNillableSourceRange sets the sourceRange field if the given value is not nil.
func (suo *SignalUpdateOne) SetNillableSourceRange(s *string) *SignalUpdateOne {
	if s != nil {
		suo.SetSourceRange(*s)
	}
	return suo
}

// ClearSourceRange clears the value of sourceRange.
func (suo *SignalUpdateOne) ClearSourceRange() *SignalUpdateOne {
	suo.mutation.ClearSourceRange()
	return suo
}

// SetSourceAsNumber sets the sourceAsNumber field.
func (suo *SignalUpdateOne) SetSourceAsNumber(s string) *SignalUpdateOne {
	suo.mutation.SetSourceAsNumber(s)
	return suo
}

// SetNillableSourceAsNumber sets the sourceAsNumber field if the given value is not nil.
func (suo *SignalUpdateOne) SetNillableSourceAsNumber(s *string) *SignalUpdateOne {
	if s != nil {
		suo.SetSourceAsNumber(*s)
	}
	return suo
}

// ClearSourceAsNumber clears the value of sourceAsNumber.
func (suo *SignalUpdateOne) ClearSourceAsNumber() *SignalUpdateOne {
	suo.mutation.ClearSourceAsNumber()
	return suo
}

// SetSourceAsName sets the sourceAsName field.
func (suo *SignalUpdateOne) SetSourceAsName(s string) *SignalUpdateOne {
	suo.mutation.SetSourceAsName(s)
	return suo
}

// SetNillableSourceAsName sets the sourceAsName field if the given value is not nil.
func (suo *SignalUpdateOne) SetNillableSourceAsName(s *string) *SignalUpdateOne {
	if s != nil {
		suo.SetSourceAsName(*s)
	}
	return suo
}

// ClearSourceAsName clears the value of sourceAsName.
func (suo *SignalUpdateOne) ClearSourceAsName() *SignalUpdateOne {
	suo.mutation.ClearSourceAsName()
	return suo
}

// SetSourceCountry sets the sourceCountry field.
func (suo *SignalUpdateOne) SetSourceCountry(s string) *SignalUpdateOne {
	suo.mutation.SetSourceCountry(s)
	return suo
}

// SetNillableSourceCountry sets the sourceCountry field if the given value is not nil.
func (suo *SignalUpdateOne) SetNillableSourceCountry(s *string) *SignalUpdateOne {
	if s != nil {
		suo.SetSourceCountry(*s)
	}
	return suo
}

// ClearSourceCountry clears the value of sourceCountry.
func (suo *SignalUpdateOne) ClearSourceCountry() *SignalUpdateOne {
	suo.mutation.ClearSourceCountry()
	return suo
}

// SetSourceLatitude sets the sourceLatitude field.
func (suo *SignalUpdateOne) SetSourceLatitude(f float32) *SignalUpdateOne {
	suo.mutation.ResetSourceLatitude()
	suo.mutation.SetSourceLatitude(f)
	return suo
}

// SetNillableSourceLatitude sets the sourceLatitude field if the given value is not nil.
func (suo *SignalUpdateOne) SetNillableSourceLatitude(f *float32) *SignalUpdateOne {
	if f != nil {
		suo.SetSourceLatitude(*f)
	}
	return suo
}

// AddSourceLatitude adds f to sourceLatitude.
func (suo *SignalUpdateOne) AddSourceLatitude(f float32) *SignalUpdateOne {
	suo.mutation.AddSourceLatitude(f)
	return suo
}

// ClearSourceLatitude clears the value of sourceLatitude.
func (suo *SignalUpdateOne) ClearSourceLatitude() *SignalUpdateOne {
	suo.mutation.ClearSourceLatitude()
	return suo
}

// SetSourceLongitude sets the sourceLongitude field.
func (suo *SignalUpdateOne) SetSourceLongitude(f float32) *SignalUpdateOne {
	suo.mutation.ResetSourceLongitude()
	suo.mutation.SetSourceLongitude(f)
	return suo
}

// SetNillableSourceLongitude sets the sourceLongitude field if the given value is not nil.
func (suo *SignalUpdateOne) SetNillableSourceLongitude(f *float32) *SignalUpdateOne {
	if f != nil {
		suo.SetSourceLongitude(*f)
	}
	return suo
}

// AddSourceLongitude adds f to sourceLongitude.
func (suo *SignalUpdateOne) AddSourceLongitude(f float32) *SignalUpdateOne {
	suo.mutation.AddSourceLongitude(f)
	return suo
}

// ClearSourceLongitude clears the value of sourceLongitude.
func (suo *SignalUpdateOne) ClearSourceLongitude() *SignalUpdateOne {
	suo.mutation.ClearSourceLongitude()
	return suo
}

// SetCapacity sets the Capacity field.
func (suo *SignalUpdateOne) SetCapacity(i int) *SignalUpdateOne {
	suo.mutation.ResetCapacity()
	suo.mutation.SetCapacity(i)
	return suo
}

// AddCapacity adds i to Capacity.
func (suo *SignalUpdateOne) AddCapacity(i int) *SignalUpdateOne {
	suo.mutation.AddCapacity(i)
	return suo
}

// SetLeakSpeed sets the leakSpeed field.
func (suo *SignalUpdateOne) SetLeakSpeed(i int) *SignalUpdateOne {
	suo.mutation.ResetLeakSpeed()
	suo.mutation.SetLeakSpeed(i)
	return suo
}

// AddLeakSpeed adds i to leakSpeed.
func (suo *SignalUpdateOne) AddLeakSpeed(i int) *SignalUpdateOne {
	suo.mutation.AddLeakSpeed(i)
	return suo
}

// SetReprocess sets the reprocess field.
func (suo *SignalUpdateOne) SetReprocess(b bool) *SignalUpdateOne {
	suo.mutation.SetReprocess(b)
	return suo
}

// SetOwnerID sets the owner edge to Machine by id.
func (suo *SignalUpdateOne) SetOwnerID(id int) *SignalUpdateOne {
	suo.mutation.SetOwnerID(id)
	return suo
}

// SetNillableOwnerID sets the owner edge to Machine by id if the given value is not nil.
func (suo *SignalUpdateOne) SetNillableOwnerID(id *int) *SignalUpdateOne {
	if id != nil {
		suo = suo.SetOwnerID(*id)
	}
	return suo
}

// SetOwner sets the owner edge to Machine.
func (suo *SignalUpdateOne) SetOwner(m *Machine) *SignalUpdateOne {
	return suo.SetOwnerID(m.ID)
}

// AddDecisionIDs adds the decisions edge to Decision by ids.
func (suo *SignalUpdateOne) AddDecisionIDs(ids ...int) *SignalUpdateOne {
	suo.mutation.AddDecisionIDs(ids...)
	return suo
}

// AddDecisions adds the decisions edges to Decision.
func (suo *SignalUpdateOne) AddDecisions(d ...*Decision) *SignalUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return suo.AddDecisionIDs(ids...)
}

// AddEventIDs adds the events edge to Event by ids.
func (suo *SignalUpdateOne) AddEventIDs(ids ...int) *SignalUpdateOne {
	suo.mutation.AddEventIDs(ids...)
	return suo
}

// AddEvents adds the events edges to Event.
func (suo *SignalUpdateOne) AddEvents(e ...*Event) *SignalUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return suo.AddEventIDs(ids...)
}

// AddMetaIDs adds the metas edge to Meta by ids.
func (suo *SignalUpdateOne) AddMetaIDs(ids ...int) *SignalUpdateOne {
	suo.mutation.AddMetaIDs(ids...)
	return suo
}

// AddMetas adds the metas edges to Meta.
func (suo *SignalUpdateOne) AddMetas(m ...*Meta) *SignalUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return suo.AddMetaIDs(ids...)
}

// Mutation returns the SignalMutation object of the builder.
func (suo *SignalUpdateOne) Mutation() *SignalMutation {
	return suo.mutation
}

// ClearOwner clears the owner edge to Machine.
func (suo *SignalUpdateOne) ClearOwner() *SignalUpdateOne {
	suo.mutation.ClearOwner()
	return suo
}

// RemoveDecisionIDs removes the decisions edge to Decision by ids.
func (suo *SignalUpdateOne) RemoveDecisionIDs(ids ...int) *SignalUpdateOne {
	suo.mutation.RemoveDecisionIDs(ids...)
	return suo
}

// RemoveDecisions removes decisions edges to Decision.
func (suo *SignalUpdateOne) RemoveDecisions(d ...*Decision) *SignalUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return suo.RemoveDecisionIDs(ids...)
}

// RemoveEventIDs removes the events edge to Event by ids.
func (suo *SignalUpdateOne) RemoveEventIDs(ids ...int) *SignalUpdateOne {
	suo.mutation.RemoveEventIDs(ids...)
	return suo
}

// RemoveEvents removes events edges to Event.
func (suo *SignalUpdateOne) RemoveEvents(e ...*Event) *SignalUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return suo.RemoveEventIDs(ids...)
}

// RemoveMetaIDs removes the metas edge to Meta by ids.
func (suo *SignalUpdateOne) RemoveMetaIDs(ids ...int) *SignalUpdateOne {
	suo.mutation.RemoveMetaIDs(ids...)
	return suo
}

// RemoveMetas removes metas edges to Meta.
func (suo *SignalUpdateOne) RemoveMetas(m ...*Meta) *SignalUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return suo.RemoveMetaIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (suo *SignalUpdateOne) Save(ctx context.Context) (*Signal, error) {

	var (
		err  error
		node *Signal
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SignalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SignalUpdateOne) SaveX(ctx context.Context) *Signal {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *SignalUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SignalUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SignalUpdateOne) sqlSave(ctx context.Context) (s *Signal, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   signal.Table,
			Columns: signal.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: signal.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Signal.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: signal.FieldCreatedAt,
		})
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: signal.FieldUpdatedAt,
		})
	}
	if value, ok := suo.mutation.Scenario(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: signal.FieldScenario,
		})
	}
	if value, ok := suo.mutation.BucketId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: signal.FieldBucketId,
		})
	}
	if value, ok := suo.mutation.AlertMessage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: signal.FieldAlertMessage,
		})
	}
	if value, ok := suo.mutation.EventsCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: signal.FieldEventsCount,
		})
	}
	if value, ok := suo.mutation.AddedEventsCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: signal.FieldEventsCount,
		})
	}
	if value, ok := suo.mutation.StartedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: signal.FieldStartedAt,
		})
	}
	if value, ok := suo.mutation.StoppedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: signal.FieldStoppedAt,
		})
	}
	if value, ok := suo.mutation.SourceIp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: signal.FieldSourceIp,
		})
	}
	if suo.mutation.SourceIpCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: signal.FieldSourceIp,
		})
	}
	if value, ok := suo.mutation.SourceRange(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: signal.FieldSourceRange,
		})
	}
	if suo.mutation.SourceRangeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: signal.FieldSourceRange,
		})
	}
	if value, ok := suo.mutation.SourceAsNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: signal.FieldSourceAsNumber,
		})
	}
	if suo.mutation.SourceAsNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: signal.FieldSourceAsNumber,
		})
	}
	if value, ok := suo.mutation.SourceAsName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: signal.FieldSourceAsName,
		})
	}
	if suo.mutation.SourceAsNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: signal.FieldSourceAsName,
		})
	}
	if value, ok := suo.mutation.SourceCountry(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: signal.FieldSourceCountry,
		})
	}
	if suo.mutation.SourceCountryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: signal.FieldSourceCountry,
		})
	}
	if value, ok := suo.mutation.SourceLatitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: signal.FieldSourceLatitude,
		})
	}
	if value, ok := suo.mutation.AddedSourceLatitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: signal.FieldSourceLatitude,
		})
	}
	if suo.mutation.SourceLatitudeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Column: signal.FieldSourceLatitude,
		})
	}
	if value, ok := suo.mutation.SourceLongitude(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: signal.FieldSourceLongitude,
		})
	}
	if value, ok := suo.mutation.AddedSourceLongitude(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: signal.FieldSourceLongitude,
		})
	}
	if suo.mutation.SourceLongitudeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Column: signal.FieldSourceLongitude,
		})
	}
	if value, ok := suo.mutation.Capacity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: signal.FieldCapacity,
		})
	}
	if value, ok := suo.mutation.AddedCapacity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: signal.FieldCapacity,
		})
	}
	if value, ok := suo.mutation.LeakSpeed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: signal.FieldLeakSpeed,
		})
	}
	if value, ok := suo.mutation.AddedLeakSpeed(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: signal.FieldLeakSpeed,
		})
	}
	if value, ok := suo.mutation.Reprocess(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: signal.FieldReprocess,
		})
	}
	if suo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   signal.OwnerTable,
			Columns: []string{signal.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: machine.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   signal.OwnerTable,
			Columns: []string{signal.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: machine.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := suo.mutation.RemovedDecisionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   signal.DecisionsTable,
			Columns: []string{signal.DecisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: decision.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.DecisionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   signal.DecisionsTable,
			Columns: []string{signal.DecisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: decision.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := suo.mutation.RemovedEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   signal.EventsTable,
			Columns: []string{signal.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   signal.EventsTable,
			Columns: []string{signal.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := suo.mutation.RemovedMetasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   signal.MetasTable,
			Columns: []string{signal.MetasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: meta.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.MetasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   signal.MetasTable,
			Columns: []string{signal.MetasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: meta.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	s = &Signal{config: suo.config}
	_spec.Assign = s.assignValues
	_spec.ScanValues = s.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{signal.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
