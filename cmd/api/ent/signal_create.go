// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/crowdsecurity/crowdsec/cmd/api/ent/decision"
	"github.com/crowdsecurity/crowdsec/cmd/api/ent/event"
	"github.com/crowdsecurity/crowdsec/cmd/api/ent/machine"
	"github.com/crowdsecurity/crowdsec/cmd/api/ent/meta"
	"github.com/crowdsecurity/crowdsec/cmd/api/ent/signal"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// SignalCreate is the builder for creating a Signal entity.
type SignalCreate struct {
	config
	mutation *SignalMutation
	hooks    []Hook
}

// SetCreatedAt sets the created_at field.
func (sc *SignalCreate) SetCreatedAt(t time.Time) *SignalCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (sc *SignalCreate) SetNillableCreatedAt(t *time.Time) *SignalCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the updated_at field.
func (sc *SignalCreate) SetUpdatedAt(t time.Time) *SignalCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (sc *SignalCreate) SetNillableUpdatedAt(t *time.Time) *SignalCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetScenario sets the scenario field.
func (sc *SignalCreate) SetScenario(s string) *SignalCreate {
	sc.mutation.SetScenario(s)
	return sc
}

// SetBucketId sets the bucketId field.
func (sc *SignalCreate) SetBucketId(s string) *SignalCreate {
	sc.mutation.SetBucketId(s)
	return sc
}

// SetAlertMessage sets the alertMessage field.
func (sc *SignalCreate) SetAlertMessage(s string) *SignalCreate {
	sc.mutation.SetAlertMessage(s)
	return sc
}

// SetEventsCount sets the eventsCount field.
func (sc *SignalCreate) SetEventsCount(i int) *SignalCreate {
	sc.mutation.SetEventsCount(i)
	return sc
}

// SetStartedAt sets the startedAt field.
func (sc *SignalCreate) SetStartedAt(t time.Time) *SignalCreate {
	sc.mutation.SetStartedAt(t)
	return sc
}

// SetStoppedAt sets the stoppedAt field.
func (sc *SignalCreate) SetStoppedAt(t time.Time) *SignalCreate {
	sc.mutation.SetStoppedAt(t)
	return sc
}

// SetSourceIp sets the sourceIp field.
func (sc *SignalCreate) SetSourceIp(s string) *SignalCreate {
	sc.mutation.SetSourceIp(s)
	return sc
}

// SetNillableSourceIp sets the sourceIp field if the given value is not nil.
func (sc *SignalCreate) SetNillableSourceIp(s *string) *SignalCreate {
	if s != nil {
		sc.SetSourceIp(*s)
	}
	return sc
}

// SetSourceRange sets the sourceRange field.
func (sc *SignalCreate) SetSourceRange(s string) *SignalCreate {
	sc.mutation.SetSourceRange(s)
	return sc
}

// SetNillableSourceRange sets the sourceRange field if the given value is not nil.
func (sc *SignalCreate) SetNillableSourceRange(s *string) *SignalCreate {
	if s != nil {
		sc.SetSourceRange(*s)
	}
	return sc
}

// SetSourceAsNumber sets the sourceAsNumber field.
func (sc *SignalCreate) SetSourceAsNumber(s string) *SignalCreate {
	sc.mutation.SetSourceAsNumber(s)
	return sc
}

// SetNillableSourceAsNumber sets the sourceAsNumber field if the given value is not nil.
func (sc *SignalCreate) SetNillableSourceAsNumber(s *string) *SignalCreate {
	if s != nil {
		sc.SetSourceAsNumber(*s)
	}
	return sc
}

// SetSourceAsName sets the sourceAsName field.
func (sc *SignalCreate) SetSourceAsName(s string) *SignalCreate {
	sc.mutation.SetSourceAsName(s)
	return sc
}

// SetNillableSourceAsName sets the sourceAsName field if the given value is not nil.
func (sc *SignalCreate) SetNillableSourceAsName(s *string) *SignalCreate {
	if s != nil {
		sc.SetSourceAsName(*s)
	}
	return sc
}

// SetSourceCountry sets the sourceCountry field.
func (sc *SignalCreate) SetSourceCountry(s string) *SignalCreate {
	sc.mutation.SetSourceCountry(s)
	return sc
}

// SetNillableSourceCountry sets the sourceCountry field if the given value is not nil.
func (sc *SignalCreate) SetNillableSourceCountry(s *string) *SignalCreate {
	if s != nil {
		sc.SetSourceCountry(*s)
	}
	return sc
}

// SetSourceLatitude sets the sourceLatitude field.
func (sc *SignalCreate) SetSourceLatitude(f float32) *SignalCreate {
	sc.mutation.SetSourceLatitude(f)
	return sc
}

// SetNillableSourceLatitude sets the sourceLatitude field if the given value is not nil.
func (sc *SignalCreate) SetNillableSourceLatitude(f *float32) *SignalCreate {
	if f != nil {
		sc.SetSourceLatitude(*f)
	}
	return sc
}

// SetSourceLongitude sets the sourceLongitude field.
func (sc *SignalCreate) SetSourceLongitude(f float32) *SignalCreate {
	sc.mutation.SetSourceLongitude(f)
	return sc
}

// SetNillableSourceLongitude sets the sourceLongitude field if the given value is not nil.
func (sc *SignalCreate) SetNillableSourceLongitude(f *float32) *SignalCreate {
	if f != nil {
		sc.SetSourceLongitude(*f)
	}
	return sc
}

// SetCapacity sets the Capacity field.
func (sc *SignalCreate) SetCapacity(i int) *SignalCreate {
	sc.mutation.SetCapacity(i)
	return sc
}

// SetLeakSpeed sets the leakSpeed field.
func (sc *SignalCreate) SetLeakSpeed(i int) *SignalCreate {
	sc.mutation.SetLeakSpeed(i)
	return sc
}

// SetReprocess sets the reprocess field.
func (sc *SignalCreate) SetReprocess(b bool) *SignalCreate {
	sc.mutation.SetReprocess(b)
	return sc
}

// SetOwnerID sets the owner edge to Machine by id.
func (sc *SignalCreate) SetOwnerID(id int) *SignalCreate {
	sc.mutation.SetOwnerID(id)
	return sc
}

// SetNillableOwnerID sets the owner edge to Machine by id if the given value is not nil.
func (sc *SignalCreate) SetNillableOwnerID(id *int) *SignalCreate {
	if id != nil {
		sc = sc.SetOwnerID(*id)
	}
	return sc
}

// SetOwner sets the owner edge to Machine.
func (sc *SignalCreate) SetOwner(m *Machine) *SignalCreate {
	return sc.SetOwnerID(m.ID)
}

// AddDecisionIDs adds the decisions edge to Decision by ids.
func (sc *SignalCreate) AddDecisionIDs(ids ...int) *SignalCreate {
	sc.mutation.AddDecisionIDs(ids...)
	return sc
}

// AddDecisions adds the decisions edges to Decision.
func (sc *SignalCreate) AddDecisions(d ...*Decision) *SignalCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return sc.AddDecisionIDs(ids...)
}

// AddEventIDs adds the events edge to Event by ids.
func (sc *SignalCreate) AddEventIDs(ids ...int) *SignalCreate {
	sc.mutation.AddEventIDs(ids...)
	return sc
}

// AddEvents adds the events edges to Event.
func (sc *SignalCreate) AddEvents(e ...*Event) *SignalCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return sc.AddEventIDs(ids...)
}

// AddMetaIDs adds the metas edge to Meta by ids.
func (sc *SignalCreate) AddMetaIDs(ids ...int) *SignalCreate {
	sc.mutation.AddMetaIDs(ids...)
	return sc
}

// AddMetas adds the metas edges to Meta.
func (sc *SignalCreate) AddMetas(m ...*Meta) *SignalCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return sc.AddMetaIDs(ids...)
}

// Mutation returns the SignalMutation object of the builder.
func (sc *SignalCreate) Mutation() *SignalMutation {
	return sc.mutation
}

// Save creates the Signal in the database.
func (sc *SignalCreate) Save(ctx context.Context) (*Signal, error) {
	if err := sc.preSave(); err != nil {
		return nil, err
	}
	var (
		err  error
		node *Signal
	)
	if len(sc.hooks) == 0 {
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SignalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sc.mutation = mutation
			node, err = sc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SignalCreate) SaveX(ctx context.Context) *Signal {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sc *SignalCreate) preSave() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := signal.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := signal.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.Scenario(); !ok {
		return &ValidationError{Name: "scenario", err: errors.New("ent: missing required field \"scenario\"")}
	}
	if _, ok := sc.mutation.BucketId(); !ok {
		return &ValidationError{Name: "bucketId", err: errors.New("ent: missing required field \"bucketId\"")}
	}
	if _, ok := sc.mutation.AlertMessage(); !ok {
		return &ValidationError{Name: "alertMessage", err: errors.New("ent: missing required field \"alertMessage\"")}
	}
	if _, ok := sc.mutation.EventsCount(); !ok {
		return &ValidationError{Name: "eventsCount", err: errors.New("ent: missing required field \"eventsCount\"")}
	}
	if _, ok := sc.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "startedAt", err: errors.New("ent: missing required field \"startedAt\"")}
	}
	if _, ok := sc.mutation.StoppedAt(); !ok {
		return &ValidationError{Name: "stoppedAt", err: errors.New("ent: missing required field \"stoppedAt\"")}
	}
	if _, ok := sc.mutation.Capacity(); !ok {
		return &ValidationError{Name: "Capacity", err: errors.New("ent: missing required field \"Capacity\"")}
	}
	if _, ok := sc.mutation.LeakSpeed(); !ok {
		return &ValidationError{Name: "leakSpeed", err: errors.New("ent: missing required field \"leakSpeed\"")}
	}
	if _, ok := sc.mutation.Reprocess(); !ok {
		return &ValidationError{Name: "reprocess", err: errors.New("ent: missing required field \"reprocess\"")}
	}
	return nil
}

func (sc *SignalCreate) sqlSave(ctx context.Context) (*Signal, error) {
	s, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	s.ID = int(id)
	return s, nil
}

func (sc *SignalCreate) createSpec() (*Signal, *sqlgraph.CreateSpec) {
	var (
		s     = &Signal{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: signal.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: signal.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: signal.FieldCreatedAt,
		})
		s.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: signal.FieldUpdatedAt,
		})
		s.UpdatedAt = value
	}
	if value, ok := sc.mutation.Scenario(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: signal.FieldScenario,
		})
		s.Scenario = value
	}
	if value, ok := sc.mutation.BucketId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: signal.FieldBucketId,
		})
		s.BucketId = value
	}
	if value, ok := sc.mutation.AlertMessage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: signal.FieldAlertMessage,
		})
		s.AlertMessage = value
	}
	if value, ok := sc.mutation.EventsCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: signal.FieldEventsCount,
		})
		s.EventsCount = value
	}
	if value, ok := sc.mutation.StartedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: signal.FieldStartedAt,
		})
		s.StartedAt = value
	}
	if value, ok := sc.mutation.StoppedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: signal.FieldStoppedAt,
		})
		s.StoppedAt = value
	}
	if value, ok := sc.mutation.SourceIp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: signal.FieldSourceIp,
		})
		s.SourceIp = value
	}
	if value, ok := sc.mutation.SourceRange(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: signal.FieldSourceRange,
		})
		s.SourceRange = value
	}
	if value, ok := sc.mutation.SourceAsNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: signal.FieldSourceAsNumber,
		})
		s.SourceAsNumber = value
	}
	if value, ok := sc.mutation.SourceAsName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: signal.FieldSourceAsName,
		})
		s.SourceAsName = value
	}
	if value, ok := sc.mutation.SourceCountry(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: signal.FieldSourceCountry,
		})
		s.SourceCountry = value
	}
	if value, ok := sc.mutation.SourceLatitude(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: signal.FieldSourceLatitude,
		})
		s.SourceLatitude = value
	}
	if value, ok := sc.mutation.SourceLongitude(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: signal.FieldSourceLongitude,
		})
		s.SourceLongitude = value
	}
	if value, ok := sc.mutation.Capacity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: signal.FieldCapacity,
		})
		s.Capacity = value
	}
	if value, ok := sc.mutation.LeakSpeed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: signal.FieldLeakSpeed,
		})
		s.LeakSpeed = value
	}
	if value, ok := sc.mutation.Reprocess(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: signal.FieldReprocess,
		})
		s.Reprocess = value
	}
	if nodes := sc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   signal.OwnerTable,
			Columns: []string{signal.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: machine.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.DecisionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   signal.DecisionsTable,
			Columns: []string{signal.DecisionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: decision.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   signal.EventsTable,
			Columns: []string{signal.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.MetasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   signal.MetasTable,
			Columns: []string{signal.MetasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: meta.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return s, _spec
}

// SignalCreateBulk is the builder for creating a bulk of Signal entities.
type SignalCreateBulk struct {
	config
	builders []*SignalCreate
}

// Save creates the Signal entities in the database.
func (scb *SignalCreateBulk) Save(ctx context.Context) ([]*Signal, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Signal, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				if err := builder.preSave(); err != nil {
					return nil, err
				}
				mutation, ok := m.(*SignalMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (scb *SignalCreateBulk) SaveX(ctx context.Context) []*Signal {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
