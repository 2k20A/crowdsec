// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/crowdsecurity/crowdsec/cmd/api/ent/alert"
	"github.com/crowdsecurity/crowdsec/cmd/api/ent/decision"
	"github.com/facebook/ent/dialect/sql"
)

// Decision is the model entity for the Decision schema.
type Decision struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Until holds the value of the "until" field.
	Until time.Time `json:"until,omitempty"`
	// Scenario holds the value of the "scenario" field.
	Scenario string `json:"scenario,omitempty"`
	// DecisionType holds the value of the "decisionType" field.
	DecisionType string `json:"decisionType,omitempty"`
	// SourceIpStart holds the value of the "sourceIpStart" field.
	SourceIpStart int `json:"sourceIpStart,omitempty"`
	// SourceIpEnd holds the value of the "sourceIpEnd" field.
	SourceIpEnd int `json:"sourceIpEnd,omitempty"`
	// SourceScope holds the value of the "sourceScope" field.
	SourceScope string `json:"sourceScope,omitempty"`
	// SourceValue holds the value of the "sourceValue" field.
	SourceValue string `json:"sourceValue,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DecisionQuery when eager-loading is set.
	Edges           DecisionEdges `json:"edges"`
	alert_decisions *int
}

// DecisionEdges holds the relations/edges for other nodes in the graph.
type DecisionEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Alert
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DecisionEdges) OwnerOrErr() (*Alert, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: alert.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Decision) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullTime{},   // until
		&sql.NullString{}, // scenario
		&sql.NullString{}, // decisionType
		&sql.NullInt64{},  // sourceIpStart
		&sql.NullInt64{},  // sourceIpEnd
		&sql.NullString{}, // sourceScope
		&sql.NullString{}, // sourceValue
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Decision) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // alert_decisions
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Decision fields.
func (d *Decision) assignValues(values ...interface{}) error {
	if m, n := len(values), len(decision.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	d.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[0])
	} else if value.Valid {
		d.CreatedAt = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[1])
	} else if value.Valid {
		d.UpdatedAt = value.Time
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field until", values[2])
	} else if value.Valid {
		d.Until = value.Time
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field scenario", values[3])
	} else if value.Valid {
		d.Scenario = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field decisionType", values[4])
	} else if value.Valid {
		d.DecisionType = value.String
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field sourceIpStart", values[5])
	} else if value.Valid {
		d.SourceIpStart = int(value.Int64)
	}
	if value, ok := values[6].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field sourceIpEnd", values[6])
	} else if value.Valid {
		d.SourceIpEnd = int(value.Int64)
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field sourceScope", values[7])
	} else if value.Valid {
		d.SourceScope = value.String
	}
	if value, ok := values[8].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field sourceValue", values[8])
	} else if value.Valid {
		d.SourceValue = value.String
	}
	values = values[9:]
	if len(values) == len(decision.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field alert_decisions", value)
		} else if value.Valid {
			d.alert_decisions = new(int)
			*d.alert_decisions = int(value.Int64)
		}
	}
	return nil
}

// QueryOwner queries the owner edge of the Decision.
func (d *Decision) QueryOwner() *AlertQuery {
	return (&DecisionClient{config: d.config}).QueryOwner(d)
}

// Update returns a builder for updating this Decision.
// Note that, you need to call Decision.Unwrap() before calling this method, if this Decision
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Decision) Update() *DecisionUpdateOne {
	return (&DecisionClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (d *Decision) Unwrap() *Decision {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Decision is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Decision) String() string {
	var builder strings.Builder
	builder.WriteString("Decision(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(d.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(d.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", until=")
	builder.WriteString(d.Until.Format(time.ANSIC))
	builder.WriteString(", scenario=")
	builder.WriteString(d.Scenario)
	builder.WriteString(", decisionType=")
	builder.WriteString(d.DecisionType)
	builder.WriteString(", sourceIpStart=")
	builder.WriteString(fmt.Sprintf("%v", d.SourceIpStart))
	builder.WriteString(", sourceIpEnd=")
	builder.WriteString(fmt.Sprintf("%v", d.SourceIpEnd))
	builder.WriteString(", sourceScope=")
	builder.WriteString(d.SourceScope)
	builder.WriteString(", sourceValue=")
	builder.WriteString(d.SourceValue)
	builder.WriteByte(')')
	return builder.String()
}

// Decisions is a parsable slice of Decision.
type Decisions []*Decision

func (d Decisions) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
