// Code generated by entc, DO NOT EDIT.

package decision

import (
	"time"

	"github.com/crowdsecurity/crowdsec/cmd/api/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Until applies equality check predicate on the "until" field. It's identical to UntilEQ.
func Until(v time.Time) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUntil), v))
	})
}

// Scenario applies equality check predicate on the "scenario" field. It's identical to ScenarioEQ.
func Scenario(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScenario), v))
	})
}

// DecisionType applies equality check predicate on the "decisionType" field. It's identical to DecisionTypeEQ.
func DecisionType(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDecisionType), v))
	})
}

// SourceIpStart applies equality check predicate on the "sourceIpStart" field. It's identical to SourceIpStartEQ.
func SourceIpStart(v int) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourceIpStart), v))
	})
}

// SourceIpEnd applies equality check predicate on the "sourceIpEnd" field. It's identical to SourceIpEndEQ.
func SourceIpEnd(v int) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourceIpEnd), v))
	})
}

// SourceScope applies equality check predicate on the "sourceScope" field. It's identical to SourceScopeEQ.
func SourceScope(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourceScope), v))
	})
}

// SourceValue applies equality check predicate on the "sourceValue" field. It's identical to SourceValueEQ.
func SourceValue(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourceValue), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Decision {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Decision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Decision {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Decision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Decision {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Decision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Decision {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Decision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// UntilEQ applies the EQ predicate on the "until" field.
func UntilEQ(v time.Time) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUntil), v))
	})
}

// UntilNEQ applies the NEQ predicate on the "until" field.
func UntilNEQ(v time.Time) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUntil), v))
	})
}

// UntilIn applies the In predicate on the "until" field.
func UntilIn(vs ...time.Time) predicate.Decision {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Decision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUntil), v...))
	})
}

// UntilNotIn applies the NotIn predicate on the "until" field.
func UntilNotIn(vs ...time.Time) predicate.Decision {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Decision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUntil), v...))
	})
}

// UntilGT applies the GT predicate on the "until" field.
func UntilGT(v time.Time) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUntil), v))
	})
}

// UntilGTE applies the GTE predicate on the "until" field.
func UntilGTE(v time.Time) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUntil), v))
	})
}

// UntilLT applies the LT predicate on the "until" field.
func UntilLT(v time.Time) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUntil), v))
	})
}

// UntilLTE applies the LTE predicate on the "until" field.
func UntilLTE(v time.Time) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUntil), v))
	})
}

// ScenarioEQ applies the EQ predicate on the "scenario" field.
func ScenarioEQ(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScenario), v))
	})
}

// ScenarioNEQ applies the NEQ predicate on the "scenario" field.
func ScenarioNEQ(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldScenario), v))
	})
}

// ScenarioIn applies the In predicate on the "scenario" field.
func ScenarioIn(vs ...string) predicate.Decision {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Decision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldScenario), v...))
	})
}

// ScenarioNotIn applies the NotIn predicate on the "scenario" field.
func ScenarioNotIn(vs ...string) predicate.Decision {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Decision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldScenario), v...))
	})
}

// ScenarioGT applies the GT predicate on the "scenario" field.
func ScenarioGT(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldScenario), v))
	})
}

// ScenarioGTE applies the GTE predicate on the "scenario" field.
func ScenarioGTE(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldScenario), v))
	})
}

// ScenarioLT applies the LT predicate on the "scenario" field.
func ScenarioLT(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldScenario), v))
	})
}

// ScenarioLTE applies the LTE predicate on the "scenario" field.
func ScenarioLTE(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldScenario), v))
	})
}

// ScenarioContains applies the Contains predicate on the "scenario" field.
func ScenarioContains(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldScenario), v))
	})
}

// ScenarioHasPrefix applies the HasPrefix predicate on the "scenario" field.
func ScenarioHasPrefix(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldScenario), v))
	})
}

// ScenarioHasSuffix applies the HasSuffix predicate on the "scenario" field.
func ScenarioHasSuffix(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldScenario), v))
	})
}

// ScenarioEqualFold applies the EqualFold predicate on the "scenario" field.
func ScenarioEqualFold(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldScenario), v))
	})
}

// ScenarioContainsFold applies the ContainsFold predicate on the "scenario" field.
func ScenarioContainsFold(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldScenario), v))
	})
}

// DecisionTypeEQ applies the EQ predicate on the "decisionType" field.
func DecisionTypeEQ(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDecisionType), v))
	})
}

// DecisionTypeNEQ applies the NEQ predicate on the "decisionType" field.
func DecisionTypeNEQ(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDecisionType), v))
	})
}

// DecisionTypeIn applies the In predicate on the "decisionType" field.
func DecisionTypeIn(vs ...string) predicate.Decision {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Decision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDecisionType), v...))
	})
}

// DecisionTypeNotIn applies the NotIn predicate on the "decisionType" field.
func DecisionTypeNotIn(vs ...string) predicate.Decision {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Decision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDecisionType), v...))
	})
}

// DecisionTypeGT applies the GT predicate on the "decisionType" field.
func DecisionTypeGT(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDecisionType), v))
	})
}

// DecisionTypeGTE applies the GTE predicate on the "decisionType" field.
func DecisionTypeGTE(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDecisionType), v))
	})
}

// DecisionTypeLT applies the LT predicate on the "decisionType" field.
func DecisionTypeLT(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDecisionType), v))
	})
}

// DecisionTypeLTE applies the LTE predicate on the "decisionType" field.
func DecisionTypeLTE(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDecisionType), v))
	})
}

// DecisionTypeContains applies the Contains predicate on the "decisionType" field.
func DecisionTypeContains(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDecisionType), v))
	})
}

// DecisionTypeHasPrefix applies the HasPrefix predicate on the "decisionType" field.
func DecisionTypeHasPrefix(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDecisionType), v))
	})
}

// DecisionTypeHasSuffix applies the HasSuffix predicate on the "decisionType" field.
func DecisionTypeHasSuffix(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDecisionType), v))
	})
}

// DecisionTypeEqualFold applies the EqualFold predicate on the "decisionType" field.
func DecisionTypeEqualFold(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDecisionType), v))
	})
}

// DecisionTypeContainsFold applies the ContainsFold predicate on the "decisionType" field.
func DecisionTypeContainsFold(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDecisionType), v))
	})
}

// SourceIpStartEQ applies the EQ predicate on the "sourceIpStart" field.
func SourceIpStartEQ(v int) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourceIpStart), v))
	})
}

// SourceIpStartNEQ applies the NEQ predicate on the "sourceIpStart" field.
func SourceIpStartNEQ(v int) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSourceIpStart), v))
	})
}

// SourceIpStartIn applies the In predicate on the "sourceIpStart" field.
func SourceIpStartIn(vs ...int) predicate.Decision {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Decision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSourceIpStart), v...))
	})
}

// SourceIpStartNotIn applies the NotIn predicate on the "sourceIpStart" field.
func SourceIpStartNotIn(vs ...int) predicate.Decision {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Decision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSourceIpStart), v...))
	})
}

// SourceIpStartGT applies the GT predicate on the "sourceIpStart" field.
func SourceIpStartGT(v int) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSourceIpStart), v))
	})
}

// SourceIpStartGTE applies the GTE predicate on the "sourceIpStart" field.
func SourceIpStartGTE(v int) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSourceIpStart), v))
	})
}

// SourceIpStartLT applies the LT predicate on the "sourceIpStart" field.
func SourceIpStartLT(v int) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSourceIpStart), v))
	})
}

// SourceIpStartLTE applies the LTE predicate on the "sourceIpStart" field.
func SourceIpStartLTE(v int) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSourceIpStart), v))
	})
}

// SourceIpStartIsNil applies the IsNil predicate on the "sourceIpStart" field.
func SourceIpStartIsNil() predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSourceIpStart)))
	})
}

// SourceIpStartNotNil applies the NotNil predicate on the "sourceIpStart" field.
func SourceIpStartNotNil() predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSourceIpStart)))
	})
}

// SourceIpEndEQ applies the EQ predicate on the "sourceIpEnd" field.
func SourceIpEndEQ(v int) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourceIpEnd), v))
	})
}

// SourceIpEndNEQ applies the NEQ predicate on the "sourceIpEnd" field.
func SourceIpEndNEQ(v int) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSourceIpEnd), v))
	})
}

// SourceIpEndIn applies the In predicate on the "sourceIpEnd" field.
func SourceIpEndIn(vs ...int) predicate.Decision {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Decision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSourceIpEnd), v...))
	})
}

// SourceIpEndNotIn applies the NotIn predicate on the "sourceIpEnd" field.
func SourceIpEndNotIn(vs ...int) predicate.Decision {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Decision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSourceIpEnd), v...))
	})
}

// SourceIpEndGT applies the GT predicate on the "sourceIpEnd" field.
func SourceIpEndGT(v int) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSourceIpEnd), v))
	})
}

// SourceIpEndGTE applies the GTE predicate on the "sourceIpEnd" field.
func SourceIpEndGTE(v int) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSourceIpEnd), v))
	})
}

// SourceIpEndLT applies the LT predicate on the "sourceIpEnd" field.
func SourceIpEndLT(v int) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSourceIpEnd), v))
	})
}

// SourceIpEndLTE applies the LTE predicate on the "sourceIpEnd" field.
func SourceIpEndLTE(v int) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSourceIpEnd), v))
	})
}

// SourceIpEndIsNil applies the IsNil predicate on the "sourceIpEnd" field.
func SourceIpEndIsNil() predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSourceIpEnd)))
	})
}

// SourceIpEndNotNil applies the NotNil predicate on the "sourceIpEnd" field.
func SourceIpEndNotNil() predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSourceIpEnd)))
	})
}

// SourceScopeEQ applies the EQ predicate on the "sourceScope" field.
func SourceScopeEQ(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourceScope), v))
	})
}

// SourceScopeNEQ applies the NEQ predicate on the "sourceScope" field.
func SourceScopeNEQ(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSourceScope), v))
	})
}

// SourceScopeIn applies the In predicate on the "sourceScope" field.
func SourceScopeIn(vs ...string) predicate.Decision {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Decision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSourceScope), v...))
	})
}

// SourceScopeNotIn applies the NotIn predicate on the "sourceScope" field.
func SourceScopeNotIn(vs ...string) predicate.Decision {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Decision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSourceScope), v...))
	})
}

// SourceScopeGT applies the GT predicate on the "sourceScope" field.
func SourceScopeGT(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSourceScope), v))
	})
}

// SourceScopeGTE applies the GTE predicate on the "sourceScope" field.
func SourceScopeGTE(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSourceScope), v))
	})
}

// SourceScopeLT applies the LT predicate on the "sourceScope" field.
func SourceScopeLT(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSourceScope), v))
	})
}

// SourceScopeLTE applies the LTE predicate on the "sourceScope" field.
func SourceScopeLTE(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSourceScope), v))
	})
}

// SourceScopeContains applies the Contains predicate on the "sourceScope" field.
func SourceScopeContains(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSourceScope), v))
	})
}

// SourceScopeHasPrefix applies the HasPrefix predicate on the "sourceScope" field.
func SourceScopeHasPrefix(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSourceScope), v))
	})
}

// SourceScopeHasSuffix applies the HasSuffix predicate on the "sourceScope" field.
func SourceScopeHasSuffix(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSourceScope), v))
	})
}

// SourceScopeEqualFold applies the EqualFold predicate on the "sourceScope" field.
func SourceScopeEqualFold(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSourceScope), v))
	})
}

// SourceScopeContainsFold applies the ContainsFold predicate on the "sourceScope" field.
func SourceScopeContainsFold(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSourceScope), v))
	})
}

// SourceValueEQ applies the EQ predicate on the "sourceValue" field.
func SourceValueEQ(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourceValue), v))
	})
}

// SourceValueNEQ applies the NEQ predicate on the "sourceValue" field.
func SourceValueNEQ(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSourceValue), v))
	})
}

// SourceValueIn applies the In predicate on the "sourceValue" field.
func SourceValueIn(vs ...string) predicate.Decision {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Decision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSourceValue), v...))
	})
}

// SourceValueNotIn applies the NotIn predicate on the "sourceValue" field.
func SourceValueNotIn(vs ...string) predicate.Decision {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Decision(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSourceValue), v...))
	})
}

// SourceValueGT applies the GT predicate on the "sourceValue" field.
func SourceValueGT(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSourceValue), v))
	})
}

// SourceValueGTE applies the GTE predicate on the "sourceValue" field.
func SourceValueGTE(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSourceValue), v))
	})
}

// SourceValueLT applies the LT predicate on the "sourceValue" field.
func SourceValueLT(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSourceValue), v))
	})
}

// SourceValueLTE applies the LTE predicate on the "sourceValue" field.
func SourceValueLTE(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSourceValue), v))
	})
}

// SourceValueContains applies the Contains predicate on the "sourceValue" field.
func SourceValueContains(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSourceValue), v))
	})
}

// SourceValueHasPrefix applies the HasPrefix predicate on the "sourceValue" field.
func SourceValueHasPrefix(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSourceValue), v))
	})
}

// SourceValueHasSuffix applies the HasSuffix predicate on the "sourceValue" field.
func SourceValueHasSuffix(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSourceValue), v))
	})
}

// SourceValueEqualFold applies the EqualFold predicate on the "sourceValue" field.
func SourceValueEqualFold(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSourceValue), v))
	})
}

// SourceValueContainsFold applies the ContainsFold predicate on the "sourceValue" field.
func SourceValueContainsFold(v string) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSourceValue), v))
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.Alert) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Decision) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Decision) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Decision) predicate.Decision {
	return predicate.Decision(func(s *sql.Selector) {
		p(s.Not())
	})
}
